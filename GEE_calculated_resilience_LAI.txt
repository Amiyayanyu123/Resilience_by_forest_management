
// the GFMD and Hassen forest map and the MODIS forest map
var GFMD_2015 = ee.Image("users/youzhuo98/forest").rename("Forest_mana_type")

var Hansen_forest_map = ee.Image("UMD/hansen/global_forest_change_2022_v1_10").select("treecover2000") 

var HM_1km = Hansen_forest_map
.reproject(GFMD_2015.projection())
.reduceResolution({
  reducer: ee.Reducer.mean(),
  maxPixels: 1400,
  bestEffort: true,
}).gte(50).unmask(0).rename("Forest_2000");
//Map.addLayer(HM_1km)

var GFMD_2000 = GFMD_2015.updateMask(HM_1km)


////////////////////////////////////////////
var mask_image_bit = function (imagecol,maskband,bit) {

function mask_(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << bit);
  // Get the pixel QA band.
  var qa = image.select(maskband);
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
  return image.updateMask(mask);
}

return imagecol.map(mask_)
}
//
var reproject_mean = function (image){
var image =  image.reproject({
    crs: 'EPSG:4326',
    scale: 1000
  }) //questions:about the reproject and resample
return image
}
//

function bitwiseExtract(value, fromBit, toBit) {
 if (toBit === undefined)
 toBit = fromBit
 var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
 var mask = ee.Number(1).leftShift(maskSize).subtract(1)
 return value.rightShift(fromBit).bitwiseAnd(mask)
}
//
var stratdate = "2001-01-01"
var enddate = "2015-12-31"

var NDVI_EVI_1 = ee.ImageCollection("MODIS/061/MOD15A2H").filterDate(stratdate,enddate)

var NDVI_EVI_2 = ee.ImageCollection("MODIS/061/MYD15A2H").filterDate(stratdate,enddate)

var EVI = NDVI_EVI_1.merge(NDVI_EVI_2).map(reproject_mean)

var EVI = EVI.map(function(image){
var qa = image.select('FparLai_QC')
var good = bitwiseExtract(qa, 0) // returns 0 for good quality
return image.updateMask(good.not()) // needs to be inverted to mask pixels with bad quality
})

print(EVI)
//////////////////////////////////////
var rename_new = function(imagecol,odd,newname){
  
  var rn = function(image){
    return image.select(odd).rename(newname)
  }
  
  return imagecol.map(rn)
}

/////////////////////deseason
//monthly median datasets
var startyear = 2001; 
var endyear = 2015; 

var startmonth = 1;
var endmonth= 12;

var startdate = ee.Date.fromYMD(startyear, startmonth, 1);
var enddate = ee.Date.fromYMD(endyear+1 , endmonth, 1);
var years = ee.List.sequence(startyear, endyear);
var months = ee.List.sequence(startmonth,endmonth);
//
var EVI_MODIS = ee.ImageCollection.fromImages(
  years.map(function (y) {
    return months.map(function(m) {
    // var n=m+1;
     //print(m)
      var w = EVI.filter(ee.Filter.calendarRange(y, y, 'year'))
                    .filter(ee.Filter.calendarRange(m, m, 'month'))
                    .max().select("Lai_500m").multiply(0.01).rename("LAI");
      
      return w.set('year', y)
              .set('month', m)
              .set('system:time_start', ee.Date.fromYMD(y, m, 1).millis());
    });
  }).flatten()
);

var LAI_mean = EVI_MODIS.mean()

Export.image.toAsset({
  image: LAI_mean,
  description: "LAI_mean",
   assetId: 'LAI_mean',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});

var EVI_Zscores = EVI_MODIS.map(function(image) {
  var m = image.get("month")
  
  var img_mean = EVI_MODIS.filter(ee.Filter.eq('month', m)).mean()
  var img_std = EVI_MODIS.filter(ee.Filter.eq('month', m)).reduce(ee.Reducer.stdDev());
  
  var img_A = image.subtract(img_mean)
  var img_Z = img_A.divide(img_std).rename("LAI_Z")
 
  return img_Z.copyProperties(image,['system:time_start','year','month'])
})
//////////////////////////////////detrend
var add_Bands = function(image) {
  return image.addBands(ee.Image(1).rename("constant")).addBands(image.metadata('system:time_start')
    .divide(1000 * 60 * 60 * 24 * 365).rename("t")).copyProperties(image,['system:time_start','year','month'])
}

var detrend = function(imgecol,aimband) {
var independents = ee.List(['constant', 't']);

// Name of the dependent variable.
var dependent = ee.String(aimband);

// Compute a linear trend.  This will have two bands: 'residuals' and 
// a 2x1 band called coefficients (columns are for dependent variables).
var trend = imgecol.select(independents.add(dependent))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
// Map.addLayer(trend, {}, 'trend array image');

// Flatten the coefficients into a 2-band image
var coefficients = trend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);
// Compute a de-trended series.
var detrended = imgecol.map(function(image) {
  return image.select(dependent).subtract(
          image.select(independents).multiply(coefficients).reduce('sum'))
          .rename(dependent)
          .copyProperties(image,['system:time_start','system:time_end'])
});

return detrended
}

var EVI_dese_detr = detrend(EVI_Zscores.map(add_Bands),"LAI_Z")
print(EVI_dese_detr)

//////////////////////////////////////////////////////////////////////////////////calculated the lambda (vegetation resilience)

var get_lamda = function(ic){
   
  var ic = ee.ImageCollection(ic)
  var  l = ic.toList(ic.size())

  var dt = l.slice(0,l.size().subtract(1))   
  var dtp1 = l.slice(1,l.size()) 
    
  var create_collection = function(i) {
        var x0 = ee.Image(dt.get(i)).rename('xt').set('system:index', ee.Number(i).format('%s'))
        var x1 = ee.Image(dtp1.get(i)).rename('xtp1').set('system:index', ee.Number(i).format('%s'))
        var dx = ee.Image(x1.subtract(x0)).rename('dx').set('system:index', ee.Number(i).format('%s'))
        var constant = ee.Image(1).rename('constant').set('system:index', ee.Number(i).format('%s'))
        return constant.addBands(x0).addBands(x1).addBands(dx)
}  
  
 var  seq = ee.List.sequence(0, dt.size().subtract(1)) 
 var  data = ee.ImageCollection.fromImages(seq.map(create_collection)) 
    
  var fit = data.select(['constant', 'xt', 'dx']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_kappa = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
  
  var fit = data.select(['constant', 'xt', 'xtp1']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_xt = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
    
  var kappa_fix = slope_kappa.add(1)
  var lambda_kappa = kappa_fix.log().rename('lambda_kappa')
  var lambda_xt = slope_xt.log().rename('lambda_xt')
  
  function create_resid_kappa(image){
        var resid = image.select('dx').subtract(image.select('xt').multiply(slope_kappa)).rename('resid')
        return resid }
  
  var resid_kappa = data.map(create_resid_kappa)
  var sigma_kappa = resid_kappa.reduce(ee.Reducer.stdDev())
  
   function create_resid_xt(image){
        var resid = image.select('xtp1').subtract(image.select('xt').multiply(slope_xt)).rename('resid')
        return resid}
  var resid_xt = data.map(create_resid_xt)
  var sigma_xt = resid_xt.reduce(ee.Reducer.stdDev())
  
  return lambda_xt.addBands(sigma_xt).addBands(slope_xt)
}
////////////////////////////////////////////////////////////////
function get_lt_lambda(ic){

    var result = get_lamda(ic)
   var  sigma_xt = result.select("resid_stdDev")
   var  lambda_xt = result.select("lambda_xt")
   var  lt_var = ic.reduce(ee.Reducer.variance(), 4)
   var  ex = ee.Image(1).subtract(sigma_xt.pow(2).divide(lt_var)) 
    var lambda_variance = ex.log().multiply(0.5)
    return lambda_xt.addBands(lambda_variance)
}

var lamda = get_lt_lambda(EVI_dese_detr).updateMask(GFMD_2000)

Export.image.toAsset({
  image: lamda,
  description: "lamda_LAI",
   assetId: 'PF_NF_lamda_LAI',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});

//for the time-series lambda
var years = ee.List.sequence(2003,2013)
var windowSize = 2;
var time_lam = function reduceFits(t){
  var date = ee.Date.fromYMD(t,1,1);
  
  var data = EVI_dese_detr.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize,'year'))
  
  var lambda_time = get_lt_lambda(data).updateMask(GFMD_2000)
  
  return lambda_time.set('system:time_start',date.millis())
              .set("year", t)
}

var band = ["AC_2003","Var_2003","AC_2004","Var_2004","AC_2005","Var_2005",
"AC_2006","Var_2006","AC_2007","Var_2007","AC_2008","Var_2008","AC_2009","Var_2009","AC_2010","Var_2010",
"AC_2011","Var_2011","AC_2012","Var_2012","AC_2013","Var_2013"]

var lam_LAI_TS = ee.ImageCollection(years.map(time_lam))

var lam_LAI = lam_LAI_TS.toBands().rename(band);


Export.image.toAsset({
  image: lam_LAI,
  description: "lam_LAI",
   assetId: 'PF_NF_lamda_LAI_time_series',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});


//////////////////////////////////////////////////
var corr = function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.pearsonsCorrelation());
  var te=corr_img.select("correlation");
  var test=te;
  return test;};

var corp=function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.pearsonsCorrelation());
  var te=corr_img.select('p-value');
  var test=te;
  return test;};
//
var start_year = 2001;  
var end_year = 2015;  
var yearList = ee.List.sequence(start_year, end_year);  
var yearImgList = yearList.map(function(year) {  
  var time = ee.Date.fromYMD(year, 1, 1) 
  var mean = EVI_MODIS.filterDate(time,time.advance(+1,'year')).mean()
  return mean.set("year", year) 
            .set('system:time_start', ee.Date.fromYMD(year, 1, 1).millis())
});  
var LAI_yearly = ee.ImageCollection.fromImages(yearImgList)
//
//join
var filtereq = ee.Filter.equals({
  leftField: 'year',
  rightField: 'year',
});
var join = ee.Join.saveFirst({
    matchKey: 'match',
});
var ALL = ee.ImageCollection(join.apply(LAI_yearly,lam_LAI_TS,filtereq))
  .map(function(image) {
    return image.addBands(image.get('match'));
  });

var corr_1 = corr(ALL,"lambda_xt","LAI").rename("AC_LAI").updateMask(GFMD_2000)
var corp_1 = corp(ALL,"lambda_xt","LAI").rename("P_AC_LAI").updateMask(GFMD_2000)

var corr_2 = corr(ALL,"constant","LAI").rename("VAR_LAI").updateMask(GFMD_2000)
var corp_2 = corp(ALL,"constant","LAI").rename("P_VAR_LAI").updateMask(GFMD_2000)

var sta_all = corr_1.addBands(corp_1).addBands(corr_2).addBands(corp_2)
print(sta_all)
Export.image.toAsset({
  image: sta_all,
  description: "lam_LAI_VIgreening",
   assetId: 'PF_NF_lamda_LAI_VIgreening',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});


////////////////just for the AC1//sensitivity test
////////////////////
/////////////////////
///////////////////////////
var lamda = get_lamda(EVI_dese_detr).updateMask(GFMD_2000).select("trend").rename("AR1")
print(lamda,"AR")
Export.image.toAsset({
  image: lamda,
  description: "AR1_LAI",
   assetId: 'PF_NF_AR1_LAI',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});

//for the time-series lambda
var years = ee.List.sequence(2003,2013)
var windowSize = 2;
var time_lam = function reduceFits(t){
  var date = ee.Date.fromYMD(t,1,1);
  
  var data = EVI_dese_detr.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize,'year'))
  
  var lambda_time = get_lamda(data).select("trend").rename("AR1").updateMask(GFMD_2000)
  
  return lambda_time.set('system:time_start',date.millis())
              .set("year", t)
}

var band = ["AR_2003","AR_2004","AR_2005","AR_2006","AR_2007","AR_2008","AR_2009","AR_2010","AR_2011","AR_2012","AR_2013"]

var lam_LAI_TS = ee.ImageCollection(years.map(time_lam))

var lam_LAI = lam_LAI_TS.toBands().rename(band);
print(lam_LAI)

Export.image.toAsset({
  image: lam_LAI,
  description: "lam_LAI_AR1",
   assetId: 'PF_NF_AR1_LAI_time_series',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});


//////////////////////////////////////////////////
var corr = function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.pearsonsCorrelation());
  var te=corr_img.select("correlation");
  var test=te;
  return test;};

var corp=function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.pearsonsCorrelation());
  var te=corr_img.select('p-value');
  var test=te;
  return test;};
  
  var slope = function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.robustLinearRegression({numX: 1, numY: 1}));
  
  var  bandNames = [[band1], // 0-axis variation.
                 [band2]];
                 
  var te= corr_img.select(['coefficients']).arrayFlatten(bandNames)
  var test=te;
  return test;};
//
var start_year = 2001;  
var end_year = 2015;  
var yearList = ee.List.sequence(start_year, end_year);  
var yearImgList = yearList.map(function(year) {  
  var time = ee.Date.fromYMD(year, 1, 1) 
  var mean = EVI_MODIS.filterDate(time,time.advance(+1,'year')).mean()
  return mean.set("year", year) 
            .set('system:time_start', ee.Date.fromYMD(year, 1, 1).millis())
});  
var LAI_yearly = ee.ImageCollection.fromImages(yearImgList)
//
//join
var filtereq = ee.Filter.equals({
  leftField: 'year',
  rightField: 'year',
});
var join = ee.Join.saveFirst({
    matchKey: 'match',
});
var ALL = ee.ImageCollection(join.apply(LAI_yearly,lam_LAI_TS,filtereq))
  .map(function(image) {
    return image.addBands(image.get('match'));
  });

var corr_1 = corr(ALL,"AR1","LAI").rename("AR1_LAI").updateMask(GFMD_2000)
var corp_1 = corp(ALL,"AR1","LAI").rename("P_AR1_LAI").updateMask(GFMD_2000)

var sta_all = corr_1.addBands(corp_1)
print(sta_all)
Export.image.toAsset({
  image: sta_all,
  description: "AR1_LAI_VIgreening",
   assetId: 'PF_NF_AR1_LAI_VIgreening',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});
///////////////////////////////////////////////////////////the correlation between AR1 (ET vs LAI)
////////////////////////////////
//////////////////////
////////////////
////////
//////
///
//
var ET = ee.ImageCollection("MODIS/061/MOD16A2GF").select("ET")
//monthly median datasets
var startyear = 2001; 
var endyear = 2015; 

var startmonth = 1;
var endmonth= 12;

var startdate = ee.Date.fromYMD(startyear, startmonth, 1);
var enddate = ee.Date.fromYMD(endyear+1 , endmonth, 1);
var years = ee.List.sequence(startyear, endyear);
var months = ee.List.sequence(startmonth,endmonth);
//
var ET_MODIS = ee.ImageCollection.fromImages(
  years.map(function (y) {
    return months.map(function(m) {
    // var n=m+1;
     //print(m)
      var w = ET.filter(ee.Filter.calendarRange(y, y, 'year'))
                    .filter(ee.Filter.calendarRange(m, m, 'month'))
                    .max().select("ET").multiply(0.1).rename("AET");
      
      return w.set('year', y)
              .set('month', m)
              .set('system:time_start', ee.Date.fromYMD(y, m, 1).millis());
    });
  }).flatten()
);

var AET_Zscores = ET_MODIS.map(function(image) {
  var m = image.get("month")
  
  var img_mean = EVI_MODIS.filter(ee.Filter.eq('month', m)).mean()
  var img_std = EVI_MODIS.filter(ee.Filter.eq('month', m)).reduce(ee.Reducer.stdDev());
  
  var img_A = image.subtract(img_mean)
  var img_Z = img_A.divide(img_std).rename("AET_Z")
 
  return img_Z.copyProperties(image,['system:time_start','year','month'])
})

var AET_dese_detr = detrend(AET_Zscores.map(add_Bands),"AET_Z")

var years = ee.List.sequence(2003,2013)
var windowSize = 2;
var time_lam = function reduceFits(t){
  var date = ee.Date.fromYMD(t,1,1);
  
  var data = AET_dese_detr.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize,'year'))
  
  var lambda_time = get_lamda(data).select("trend").rename("AR1_AET").updateMask(GFMD_2000)
  
  return lambda_time.set('system:time_start',date.millis())
              .set("year", t)
}

var band = ["AR_2003","AR_2004","AR_2005","AR_2006","AR_2007","AR_2008","AR_2009","AR_2010","AR_2011","AR_2012","AR_2013"]

var lam_AET_TS = ee.ImageCollection(years.map(time_lam))

var ALL = ee.ImageCollection(join.apply(lam_AET_TS,lam_LAI_TS,filtereq))
  .map(function(image) {
    return image.addBands(image.get('match'));
  });

var corr_1 = corr(ALL,"AR1","AR1_AET").rename("AR1_LAI_AET").updateMask(GFMD_2000)
var corp_1 = corp(ALL,"AR1","AR1_AET").rename("P_AR1_LAI_AET").updateMask(GFMD_2000)
var slope_1 = slope(ALL,"AR1","AR1_AET").rename("Slope_AR1_LAI_AET").updateMask(GFMD_2000)

var sta_all = corr_1.addBands(corp_1).addBands(slope_1)

Map.addLayer(lam_LAI_TS)
Map.addLayer(lam_AET_TS)

Export.image.toAsset({
  image: sta_all,
  description: "AR1_LAI_AET",
   assetId: 'PF_NF_AR1_LAI_AET',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});

//

//trend in lambda_VI
var createYear = function(image) {
  // Scale milliseconds by a large constant.
  return image.addBands(image.metadata('year')).copyProperties(image,["system:time_start","year"]);
};

var lam_LAI_TS = lam_LAI_TS.map(createYear)
var slope = slope(lam_LAI_TS,"AR1","year").rename("Slope_AR1_LAI").updateMask(GFMD_2000)
print(slope)
Export.image.toAsset({
  image: slope,
  description: "AR1_LAI_slope",
  assetId: 'AR1_LAI_slope',  // <> modify these
  scale: 1000,
  maxPixels: 1e13
});




















