//////////////////////////////////detrend
var add_Bands = function(image) {
  return image.addBands(ee.Image(1).rename("constant")).addBands(image.metadata('system:time_start')
                                                                 .divide(1000 * 60 * 60 * 24 * 365).rename("t")).copyProperties(image,['system:time_start','year','month'])
}

var detrend = function(imgecol,aimband) {
  var imgecol = imgecol.map(add_Bands)
  
  var independents = ee.List(['constant', 't']);
  
  // Name of the dependent variable.
  var dependent = imgecol.first().bandNames().get(0)
  var dependent = ee.String(dependent)
  // Compute a linear trend.  This will have two bands: 'residuals' and 
  // a 2x1 band called coefficients (columns are for dependent variables).
  var trend = imgecol.select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  // Map.addLayer(trend, {}, 'trend array image');
  
  // Flatten the coefficients into a 2-band image
  var coefficients = trend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);
  // Compute a de-trended series.
  var detrended = imgecol.map(function(image) {
    return image.select(dependent).subtract(
      image.select(independents).multiply(coefficients).reduce('sum'))
    .rename(dependent)
    .copyProperties(image,['system:time_start','system:time_end'])
  });
  
  return detrended
}
//detrend by other methods
//detrend by non-linear
function detrend_nonlin(collection){   
   
   function addVariables(image){
        var date = ee.Date(image.get('system:time_start'))
        var years = date.difference(ee.Date('1970-01-01'), 'year')
        var t = ee.Image(years).rename('t')
        var t2 = ee.Image(years).pow(ee.Image(2)).rename('t2').toFloat()
        var t3 = ee.Image(years).pow(ee.Image(3)).rename('t3').toFloat()
        
        return image.addBands(ee.Image.constant(1)).addBands(t).addBands(t2)
                .addBands(t3).toDouble()}

function remove_trend(image){
       var detrended = image.select(dependent).subtract(image.select(independents).multiply(coefficients).reduce('sum'))
            .rename('detrend').copyProperties(image, ['system:time_start'])
        return image.addBands(detrended)}
   
    var idps = ['constant', 't', 't2', 't3']
    var independents = ee.List(idps)
    var img = collection.first()
    var bn = img.bandNames().get(0)
    var dependent = ee.String(bn)
    
    var coll = collection.map(addVariables)
    
   var  trend = coll.select(independents.add(dependent)).reduce(ee.Reducer.linearRegression(independents.length(), 1))
    
    var coefficients = trend.select('coefficients').arrayProject([0]).arrayFlatten([independents])
    
    var detrended = coll.map(remove_trend)
    return detrended.select('detrend')}
//////////////////////////////////rolling_detrend
//rolling_mean
  function rolling_mean(ic){
        var fit_period = 5 * 365
        var window_unit = 'day'
        var len_sides = 912
        
    function apply_roller(dates){
        function roller(t){
            var t_d = ee.Date(t)
            var window = ic.filterDate(t_d.advance(-len_sides,window_unit),t_d.advance(len_sides,window_unit))
           var img = window.reduce(ee.Reducer.mean())
            var data = ee.Image(window.filterDate(t_d).first())
            
            var out = data.subtract(img)
            var out = out.set('system:time_start', t)
            return out }
        
        vals = dates.map(roller)
        return vals}
    
    var dates = ee.List(ic.aggregate_array('system:time_start'))
    var vals = apply_roller(dates)
  return ee.ImageCollection.fromImages(vals)
  }    
//rolling_linear
 function rolling_linear(ic){
        var fit_period = 5 * 365
        var window_unit = 'day'
        var len_sides = 912
        
    function apply_roller(dates){
        function roller(t){
            var t_d = ee.Date(t)
            var window = ic.filterDate(t_d.advance(-len_sides,window_unit),t_d.advance(len_sides,window_unit))
            
            var dt = detrend(window)
            var img = ee.Image(dt.filterDate(t_d).first())
            
            return img.set('system:time_start', t)
            }
        
        vals = dates.map(roller)
        return vals}
    
    var dates = ee.List(ic.aggregate_array('system:time_start'))
    var vals = apply_roller(dates)
  return ee.ImageCollection.fromImages(vals)
  }    



//////////deseason by daily mean
//add the day of year
//

function deseason_daily(ic){
  
  function addDayOfYear(image) {
  var doy = ee.Date(image.get('system:time_start')).getRelative('day', 'year');
  var DOY = ee.Number(doy.int())
  return image.set('day_of_year', DOY);
}
  
  var ic = ic.map(addDayOfYear)
function remove_lt_daily_mean(image){
  var DOY = ee.Date(image.get('day_of_year'))
  var sub_mean = ic.filter(ee.Filter.eq('day_of_year', DOY)).mean()
    return image.divide(sub_mean).copyProperties(image,['system:time_start','day_of_year']) }

  return ic.map(remove_lt_daily_mean)
}
///////////////////////////fit harmon
function fit_harmon(ic){

// The number of cycles per year to model.
var harmonics = 3;

// Make a list of harmonic frequencies to model.  
// These also serve as band name suffixes.
var harmonicFrequencies = ee.List.sequence(1, harmonics);

// Function to get a sequence of band names for harmonic terms.
var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};
// Construct lists of names for the harmonic terms.
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);

// Independent variables.
var independents = ee.List(['constant', 't'])
  .cat(cosNames).cat(sinNames);

var addConstant = function(image) {
  return image.addBands(ee.Image(1));
};

// Function to add a time band.
var addTime = function(image) {
  // Compute time in fractional years since the epoch.
  var date = ee.Date(image.get('system:time_start'));
  var years = date.difference(ee.Date('1970-01-01'), 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI));
  return image.addBands(timeRadians.rename('t').float());
};

// Function to compute the specified number of harmonics
// and add them as bands.  Assumes the time band is present.
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies.
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms.
    var cosines = time.multiply(frequencies).cos()
      .rename(cosNames);
    // Get the sin terms.
    var sines = time.multiply(frequencies).sin()
      .rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

var ic = ic.map(addConstant)
  .map(addTime)
  .map(addHarmonics(harmonicFrequencies));
  
var dependent = ic.first().bandNames().get(0)

var harmonicTrend = ic
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));

// Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Compute fitted values.
var fittedHarmonic = ic.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted')).select("fitted");
});

  return fittedHarmonic
}
//
// Function to deseasonalize an image collection
function deseasonalizeCollection(ic, bandName) {
  // Function to add the day of the year as a property to each image
  function addDayOfYear(image) {
    var doy = ee.Date(image.get('system:time_start')).getRelative('day', 'year');
    var DOY = ee.Number(doy.int());
    return image.set('day_of_year', DOY);
  }

  // Add the day of the year property to each image in the collection
  var icWithDOY = ic.map(addDayOfYear);
  
  // Generate a list of unique DOYs present in the image collection
  var uniqueDOYs = ee.List(icWithDOY.aggregate_array('day_of_year')).distinct();
  
  // Create mean images for each DOY and assemble them into an image collection
  var meanDailyCollection = ee.ImageCollection.fromImages(
    uniqueDOYs.map(function (doy) {
      doy = ee.Number(doy); // Ensure DOY is treated as a number
      var dailyMean = icWithDOY.filter(ee.Filter.eq('day_of_year', doy)).mean().rename("season");
      return dailyMean.set('day_of_year', doy);
    })
  );

  // Define the join filter
  var filtereq = ee.Filter.equals({
    leftField: 'day_of_year',
    rightField: 'day_of_year',
  });
  
  // Apply the join
  var join = ee.Join.saveFirst({
    matchKey: 'match',
  });
  
  // Perform the join
  var joinedCollection = ee.ImageCollection(join.apply(icWithDOY, meanDailyCollection, filtereq))
    .map(function(image) {
      var matchedImage = ee.Image(image.get('match'));
      return image.addBands(matchedImage);
    });

  // Subtract the seasonal mean from each image in the collection
  var deseasonalizedCollection = joinedCollection.map(function(image) {
    return image.addBands(
      image.expression('(a1 - b1)', {
        a1: image.select(bandName),
        b1: image.select('season'),
      }).rename('fitted')).select('fitted');
  });

  return deseasonalizedCollection;
}
/////////////////////////////////////////////////////////////////////lambda calculation
var get_lamda = function(ic){
  
  var ic = ee.ImageCollection(ic)
  var  l = ic.toList(ic.size())
  
  var dt = l.slice(0,l.size().subtract(1))   
  var dtp1 = l.slice(1,l.size()) 
  
  var create_collection = function(i) {
    var x0 = ee.Image(dt.get(i)).rename('xt').set('system:index', ee.Number(i).format('%s'))
    var x1 = ee.Image(dtp1.get(i)).rename('xtp1').set('system:index', ee.Number(i).format('%s'))
    var dx = ee.Image(x1.subtract(x0)).rename('dx').set('system:index', ee.Number(i).format('%s'))
    var constant = ee.Image(1).rename('constant').set('system:index', ee.Number(i).format('%s'))
    return constant.addBands(x0).addBands(x1).addBands(dx)
  }  
  
  var  seq = ee.List.sequence(0, dt.size().subtract(1)) 
  var  data = ee.ImageCollection.fromImages(seq.map(create_collection)) 
  
  var fit = data.select(['constant', 'xt', 'dx']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_kappa = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
  
  var fit = data.select(['constant', 'xt', 'xtp1']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_xt = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
  
  var kappa_fix = slope_kappa.add(1)
  var lambda_kappa = kappa_fix.log().rename('lambda_kappa')
  var lambda_xt = slope_xt.log().rename('lambda_xt')
  
  function create_resid_kappa(image){
    var resid = image.select('dx').subtract(image.select('xt').multiply(slope_kappa)).rename('resid')
    return resid }
  
  var resid_kappa = data.map(create_resid_kappa)
  var sigma_kappa = resid_kappa.reduce(ee.Reducer.stdDev())
  
  function create_resid_xt(image){
    var resid = image.select('xtp1').subtract(image.select('xt').multiply(slope_xt)).rename('resid')
    return resid}
  var resid_xt = data.map(create_resid_xt)
  var sigma_xt = resid_xt.reduce(ee.Reducer.stdDev())
  
  return lambda_xt.addBands(sigma_xt).addBands(slope_xt)
}
////////////////////////////////////////////////////////////////
  function get_lt_lambda(ic){
    
    var result = get_lamda(ic)
    var  sigma_xt = result.select("resid_stdDev")
    var  lambda_xt = result.select("lambda_xt")
    var  lt_var = ic.reduce(ee.Reducer.variance(), 4)
    var  ex = ee.Image(1).subtract(sigma_xt.pow(2).divide(lt_var)) 
    var lambda_variance = ex.log().multiply(0.5)
    return lambda_variance.rename("lambda_var")
  }
///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////
  var mask_image_bit = function (imagecol,maskband,bit) {
    
    function mask_(image) {
      // Bits 3 and 5 are cloud shadow and cloud, respectively.
      var cloudShadowBitMask = (1 << bit);
      // Get the pixel QA band.
      var qa = image.select(maskband);
      // Both flags should be set to zero, indicating clear conditions.
      var mask = qa.bitwiseAnd(cloudShadowBitMask).lte(1)
      return image.updateMask(mask);
    }
    
    return imagecol.map(mask_)
  }

//////////////////////////////////////
  var rename_new = function(imagecol,odd,newname){
    
    var rn = function(image){
      return image.select(odd).rename(newname)
    }
    
    return imagecol.map(rn)
  }
//calculate the KNDVI
function kNDVI(image){
    var ndvi2 = image.multiply(0.0001)
    return ndvi2.set('system:time_start', image.get('system:time_start'))}
//
var reproject_mean = function (image){
var image =  image.reproject({
    crs: 'EPSG:4326',
    scale: 25000
  }) //questions:about the reproject and resample
return image
}
//
function join_c(c1, c2){
    var on='system:index'
    var filt = ee.Filter.equals({leftField : on, rightField : on}) 
    var innerJoin = ee.Join.inner() 
    var innerJoined = innerJoin.apply(c1, c2, filt) 
    
    function combine_joined(feature){
        return ee.Image.cat(feature.get('primary'), feature.get('secondary'))}
    
    var joined_collect = ee.ImageCollection(innerJoined.map(combine_joined))
    return joined_collect}
//
function simple_difference(ic, b1, b2){

    var outname='dif'
    
    function sub(image){
        var i1 = image.select(b1)
        var i2 = image.select(b2)
        return i1.subtract(i2).rename(outname)
        .set('system:time_start', image.get('system:time_start'))
        .set('system:footprint', image.get('system:footprint'))}
        
    return ic.map(sub)}
/////////////////////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////
  var mask_image_bit = function (imagecol,maskband,bit) {
    
    function mask_(image) {
      // Bits 3 and 5 are cloud shadow and cloud, respectively.
      var cloudShadowBitMask = (1 << bit);
      // Get the pixel QA band.
      var qa = image.select(maskband);
      // Both flags should be set to zero, indicating clear conditions.
      var mask = qa.bitwiseAnd(cloudShadowBitMask).lte(1)
      return image.updateMask(mask);
    }
    
    return imagecol.map(mask_)
  }
//
function KNDVI(image){
  return image.select("NDVI").multiply(0.0001).pow(2).tanh().rename("KNDVI")  
  .set('system:time_start', image.get('system:time_start'))
}
//
var reproject_mean = function (image){
var image =  image.reproject({
    crs: 'EPSG:4326',
    scale: 1000
  }) //questions:about the reproject and resample
return image
}
//
var stratdate = "2001-01-01"
var enddate = "2015-12-31"

var NDVI_EVI_1 = ee.ImageCollection("MODIS/061/MOD13A3").filterDate(stratdate,enddate)
var NDVI_EVI_1 = mask_image_bit(NDVI_EVI_1,"DetailedQA",0)

var EVI = NDVI_EVI_1.map(reproject_mean).map(KNDVI)

//////////////////////////////////////
var rename_new = function(imagecol,odd,newname){
  
  var rn = function(image){
    return image.select(odd).rename(newname)
  }
  
  return imagecol.map(rn)
}

/////////de+de
var detrend_ic = detrend(EVI,"KNDVI")

var de_de = deseasonalizeCollection(detrend_ic,"KNDVI")

//
var get_AR = function(ic){
  
  var ic = ee.ImageCollection(ic)
  var  l = ic.toList(ic.size())
  
  var dt = l.slice(0,l.size().subtract(1))   
  var dtp1 = l.slice(1,l.size()) 
  
  var create_collection = function(i) {
    var x0 = ee.Image(dt.get(i)).rename('xt').set('system:index', ee.Number(i).format('%s'))
    var x1 = ee.Image(dtp1.get(i)).rename('xtp1').set('system:index', ee.Number(i).format('%s'))
    var dx = ee.Image(x1.subtract(x0)).rename('dx').set('system:index', ee.Number(i).format('%s'))
    var constant = ee.Image(1).rename('constant').set('system:index', ee.Number(i).format('%s'))
    return constant.addBands(x0).addBands(x1).addBands(dx)
  }  
  
  var  seq = ee.List.sequence(0, dt.size().subtract(1)) 
  var  data = ee.ImageCollection.fromImages(seq.map(create_collection)) 
  
  var fit = data.select(['constant', 'xt', 'xtp1']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_xt = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
  
  return slope_xt.rename("AR1")
}
//
// the GFMD and Hassen forest map and the MODIS forest map
var GFMD_2015 = ee.Image("users/youzhuo98/forest").rename("Forest_mana_type")

var Hansen_forest_map = ee.Image("UMD/hansen/global_forest_change_2022_v1_10").select("treecover2000") 

var HM_1km = Hansen_forest_map
.reproject(GFMD_2015.projection())
.reduceResolution({
  reducer: ee.Reducer.mean(),
  maxPixels: 1400,
  bestEffort: true,
}).gte(50).unmask(0).rename("Forest_2000");
//Map.addLayer(HM_1km)

var GFMD_2000 = GFMD_2015.updateMask(HM_1km)

var AR1 = get_AR(de_de).select("AR1").updateMask(HM_1km)
var lambda_Var = get_lt_lambda(de_de).updateMask(HM_1km)
print(AR1)

Export.image.toAsset({
    image: AR1,
    description: "resilience_AR1_FPAR_single_dede" ,
    assetId:'resilience_AR1_FPAR_single_dede',
    scale: 1000,
    maxPixels: 1e13
  })
  
Export.image.toAsset({
    image: lambda_Var,
    description: "resilience_lambda_var_FPAR_single_dede" ,
    assetId: 'resilience_lambda_var_FPAR_single_dede' ,
    scale: 1000,
    maxPixels: 1e13
  })





